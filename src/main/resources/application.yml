spring:
  application:
    name: Airbnb backend
  ## Database
  datasource:
    url: ${DBMS_CONNECTION:jdbc:postgresql://localhost:5432/airbnb}
    username: ${DBMS_USERNAME:postgres}
    password: ${DBMS_PASSWORD:123456}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

  ## Redis
  data:
    redis:
      host: localhost
      port: 6379

  ## File
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB

  #OAuth2
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://www.googleapis.com/oauth2/v4/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub

  ## Email
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

## End point api
api:
  prefix: "/api/v1"

## JWT
jwt:
  signerKey: ${JWT_SIGNERKEY}
  valid-duration: 3600 #in second
  refreshable-duration: 36000 #in second

## Cloudinary
cloudinary:
  cloud_name: ${CLOUDINARY_NAME}
  api_key: ${CLOUDINARY_API_KEY}
  api_secret: ${CLOUDINARY_API_SECRET}

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /api-docs
    operationsSorter: method
  packages-to-scan: com.project.airbnb.controller

# Account admin
app:
  admin:
    username: ${ADMIN_USERNAME}
    password: ${ADMIN_PASSWORD}
    email: ${ADMIN_EMAIL}